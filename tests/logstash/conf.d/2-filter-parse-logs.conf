# Parse incomming log rows

filter {
# Drop empty lines. Those would otherwise produce errors
    if [message] =~ /^\s*$/ {
      drop { }
    }
# Handle monad-logger style log rows
    grok {
      match => {message =>
        [ "\A\[%{LOGLEVEL:log_level}(#(?<component>[^\]]+))?] %{GREEDYDATA:message}\Z"
        ]}
      overwrite => ["message", "log_level"]
      add_field => {"type" => "logs"}
    }
# Handle json-formatted log rows
    if [component] == "json_event" {
      json {
        source => "message"
        add_field => { "parsed_json" => true}
        remove_field => ["message"]
      }
    }
    else {
      mutate {
        add_field => {"parsed_json" => false }
      }
    }

# Parse logging levels
  mutate {
    lowercase => ["log_level"]
  }
  translate {
      field => "log_level"
      destination => "level"
      override => true
      dictionary =>
        [ "debug"   , "7"
        , "notice"  , "6"
        , "info"    , "5"
        , "warn"    , "4"
        , "error"   , "3"
        , "critical", "2"
        , "alert"   , "1"
        , "emerg"   , "0"
        ]
      fallback => "3"
  }
  mutate {
  # For some reason the parsed_json field gets added as string
  # instead of boolean, so we convert it here
    convert => { "level" => "integer"
                 "parsed_json" => "boolean"
               }
  }
}